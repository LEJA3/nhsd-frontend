name: Release Workflow

on:
  release:
    types: [published]

jobs:
  #
  # Build homepage distribution from source
  #
  build_homepage:
    name: "Build Homepage Distribution"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      #
      # Step 1
      # Checkout the project's sourcecode
      #
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Step 2
      # Set Node.js version
      #
      - name: Request Node Version
        uses: actions/setup-node@v2
        with:
          node-version: '12.6.0'

      #
      # Step 3
      # Cache Management (CDN Distribution)
      #
      - name: Get cache key helper values
        uses: actions/github-script@v3
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Node.js packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-nhs-digital-homepage-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-nhs-digital-homepage-${{ env.YEAR }}-
            ${{ runner.os }}-nhs-digital-homepage-

      #
      # Step 4
      #
      - name: Initialise NPM
        run: npm i
        working-directory: homepage

      #
      # Step 5
      #
      - name: Build dist folder
        run: npm run build
        working-directory: homepage

      #
      # Step 6
      # Store homepage distribution workflow artifacts
      #
      - name: Archive dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: homepage-dist
          path: homepage/dist/

  #
  # Build CDN Distribution from source
  #
  build_dist:
    name: "Build CDN Distribution"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      #
      # Step 1
      # Checkout the project's sourcecode
      #
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Step 2
      # Set Node.js version
      #
      - name: Request Node Version
        uses: actions/setup-node@v2
        with:
          node-version: '12.6.0'

      #
      # Step 3
      # Cache Management (CDN Distribution)
      #
      - name: Get cache key helper values
        uses: actions/github-script@v3
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Node.js packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-nhs-digital-distribution-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-nhs-digital-distribution-${{ env.YEAR }}-
            ${{ runner.os }}-nhs-digital-distribution-

      #
      # Step 4
      #
      - name: Initialise NPM
        run: npm i

      #
      # Step 5
      #
      - name: Build dist folder
        run: npm run dist:build:prod

      #
      # Step 6
      # Store CDN distribution workflow artifacts
      #
      - name: Archive dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cdn-dist
          path: |
            dist/fonts/
            dist/icons/
            dist/images/
            dist/scripts/
            dist/static/
            dist/stylesheets/

  #
  # Build Storybook from source
  #
  build_storybook:
    name: "Build Storybook Distribution"
    needs:
      - create_version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      #
      # Step 1
      # Checkout the project's sourcecode
      #
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Step 2
      # Set Node.js version
      #
      - name: Request Node Version
        uses: actions/setup-node@v2
        with:
          node-version: '12.6.0'

      #
      # Step 3
      # Cache Management (Storybook)
      #
      - name: Get cache key helper values
        uses: actions/github-script@v3
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Node.js packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-nhs-digital-storybook-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-nhs-digital-storybook-${{ env.YEAR }}-
            ${{ runner.os }}-nhs-digital-storybook-

      #
      # Step 4
      #
      - name: Initialise NPM
        run: npm i

      #
      # Step 7
      # Build storybook project
      #
      - name: Build Storybook
        env:
          STORYBOOK_VERSION: ${{ github.event.release.tag_name }}
        run: npm run storybook:build

      #
      # Step 8
      # Store Storybook workflow artifacts
      #
      - name: Archive storybook artifact
        uses: actions/upload-artifact@v2
        with:
          name: storybook-dist
          path: storybook-static/

  #
  # Build NPM Package from source
  #
  build_npm_package:
    name: "Build NPM Distribution"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      #
      # Step 1
      # Checkout the project's sourcecode
      #
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Step 2
      # Set Node.js version
      #
      - name: Request Node Version
        uses: actions/setup-node@v2
        with:
          node-version: '12.6.0'

      #
      # Step 3
      # Cache Management (NPM package)
      #
      - name: Get cache key helper values
        uses: actions/github-script@v3
        id: cache-key-helper
        with:
          result-encoding: string
          script: |
            return JSON.stringify({
              "year" : new Date().getFullYear(),
              "rotation" : new Date().getTimezoneOffset()
            })
      - name: Setup cache (Node.js packages)
        uses: actions/cache@v2
        env:
          YEAR: ${{ fromJSON(steps.cache-key-helper.outputs.result).year }}
          ROTATION: ${{ fromJSON(steps.cache-key-helper.outputs.result).rotation }}
        with:
          path: ~/.npm
          key: ${{ runner.os }}-nhs-digital-npm-${{ env.YEAR }}-${{ env.ROTATION }}
          restore-keys: |
            ${{ runner.os }}-nhs-digital-npm-${{ env.YEAR }}-
            ${{ runner.os }}-nhs-digital-npm-

      #
      # Step 4
      #
      - name: Initialise NPM
        run: npm i

      #
      # Step 5
      #
      - name: Build NPM
        run: npm run package:build:prod

      #
      # Step 6
      # Store NPM Package workflow artifacts
      #
      - name: Archive NPM package artifact
        uses: actions/upload-artifact@v2
        with:
          name: npm-dist
          path: |
            package/

  #
  # Put CDN distribution artifact onto the S3 origin.
  #
  dist_cdn:
    name: "Distribute CDN"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:

      #
      # Step 1
      # Download CDN artifact and merge version artifact into the same folder
      #
      - name: Download CDN artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: cdn-dist
          path: cdn-dist

      #
      # Step 2
      # Set up AWS CLI
      #
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      #
      # Step 3
      # Replace 'latest' folder's content
      #
      - name: Replace latest
        working-directory: ${{steps.download.outputs.download-path}}
        run: aws s3 sync . s3://${{ secrets.S3_ORIGIN }}/cdn/latest --delete


  #
  # Put the Storybook distribution artifact onto the S3 origin.
  #
  dist_storybook:
    name: "Distribute Storybook"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      #
      # Step 1
      # Download CDN artifact and merge version artifact into the same folder
      #
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: storybook-dist
          path: storybook-dist

      #
      # Step 2
      # Set up AWS CLI
      #
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      #
      # Step 3
      # Replace 'latest' folder's content
      #
      - name: Replace latest
        working-directory: ${{steps.download.outputs.download-path}}
        run: aws s3 sync . s3://${{ secrets.S3_ORIGIN }}/storybook/latest --delete


  #
  # Clear the CloudFront cache.
  #
  clear_cache:
    name: "Clear CloudFront Cache"
    needs:
      - dist_homepage
      - dist_cdn
      - dist_storybook
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      #
      # Step 1
      # Set up AWS CLI
      #
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      #
      # Step 2
      # Replace latest and invalid CloudFront's catch of latest
      #
      - name: Refesh CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/storybook/latest/*" "/cdn/latest/*" "/index.html"
